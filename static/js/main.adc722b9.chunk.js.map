{"version":3,"sources":["features/slices/searchSlice.js","features/slices/popularSlice.js","features/slices/upComingSlice.js","features/slices/topRatedSlice.js","features/header/Header.js","features/slices/movieDetailSlice.js","features/card/Card.js","features/pages/pageHeading/PageHeading.js","features/pages/MovieDetails.js","features/pages/home/Home.js","features/pages/pagination/Pagination.js","features/pages/TopRated.js","features/pages/Upcoming.js","features/pages/Popular.js","features/pages/SearchResults.js","App.js","store.js","index.js"],"names":["searchAdapter","createEntityAdapter","initialState","getInitialState","currentPage","totalPages","status","error","fetchSearchResults","createAsyncThunk","query","a","getState","queryString","encodeURI","popular","request_url","fetch","response","json","searchSlice","createSlice","name","reducers","nextPage","reducer","state","prevPage","resetSearchPage","extraReducers","pending","fulfilled","action","payload","results","page","total_pages","setAll","rejected","currentSearchPage","search","actions","totalSearchPage","getSelectors","selectSearchMovies","selectAll","selectSearchMovieById","selectById","popularAdapter","currentPopularPage","fetchPopularMovies","popularSlice","resetPopularPage","toggleShowMovieDetails","popularMovieStatus","totalPopularPage","selectPopularMovies","selectPopularMovieByID","upComingAdapter","currentUpComingPage","upComing","fetchUpComingMovies","upComingSlice","resetUpComingPage","upComingMovieStatus","totalUpComingPage","selectUpComingMovies","selectUpComingMovieById","topRatedAdapter","fetchtopRatedMovies","topRated","topRatedSlice","resetTopRatedPage","topRatedMovieStatus","totalTopRatedPage","currentTopRatedPage","selectTopRatedMovies","selectTopRatedMovieById","Header","useState","showNav","setShowNav","searchInput","setSearchInput","showSearchInput","setShowSearchInput","barsIcon","icon","faBars","timesIcon","faTimes","searchIcon","faSearch","dispatch","useDispatch","toggleNav","navMenu","map","item","key","exact","to","onClick","className","type","value","onChange","event","target","placeholder","movieDetailSlice","showMovieDetails","Card","title","poster","rating","year","id","setMovieId","src","alt","undefined","slice","PageHeading","browseAll","popularPageCurrent","useSelector","popularPageTotal","topRatedPageCurrent","topRatedPageTotal","upComingPageCurrent","upComingTotal","searchPageCurrent","searchResultTotal","totalPage","MovieDetails","MovieId","popularMovieDetails","topRatedMovieDetails","upComingMovieDetails","searchMovieDetails","movie","overview","vote_average","backgroundImage","backdrop_path","release_date","style","Home","popularMoviesArray","topRatedMoviesArray","upComingMoviesArray","popularStatus","topRatedStatus","upComingStatus","showMovieDetail","useEffect","popularMovies","movies","poster_path","topRatedMovies","upComingMovies","Pagination","category","searchPageTotal","nextPopularPage","nextTopRatedPage","nextUpComingPage","nextSearchPage","prevPopularPage","prevTopRatedPage","prevUpComingPage","prevSearchPage","fetchNewPage","TopRated","Upcoming","Popular","SearchResults","searchMoviesArray","searchResults","App","path","popularReducer","topRatedReducer","upComingReducer","searchReducer","movieDetailsReducer","store","configureStore","destination","document","querySelector","ReactDOM","render"],"mappings":"obAEMA,EAAgBC,cAEhBC,EAAeF,EAAcG,gBAAgB,CAC/CC,YAAa,EACbC,WAAY,GACZC,OAAQ,OACRC,MAAO,OAGEC,EAAqBC,YAAiB,4BAAD,uCAC9C,WAAOC,EAAP,0BAAAC,EAAA,6DAAeC,EAAf,EAAeA,SACLC,EAAcC,UAAUJ,GACd,4CACJ,mCAELN,EAAeQ,IAAWG,QAA1BX,YAEHY,EAPR,UAEoB,4CAFpB,oBAGgB,mCAHhB,kBAOyDH,EAPzD,gCAO4FT,EAP5F,iCAS2Ba,MAAMD,GATjC,cASUE,EATV,yBAUWA,EAASC,QAVpB,4CAD8C,yDAe5CC,EAAcC,YAAY,CAC5BC,KAAM,SACNpB,eACAqB,SAAU,CACNC,SAAU,CACNC,QADM,SACEC,GACJA,EAAMtB,gBAGduB,SAAU,CACNF,QADM,SACEC,GACJA,EAAMtB,gBAGdwB,gBAAiB,CACbH,QADa,SACLC,GACAA,EAAMtB,YAAc,IACpBsB,EAAMtB,YAAc,MAKpCyB,eAAa,mBACRrB,EAAmBsB,SADX,SACqBJ,GACL,SAAjBA,EAAMpB,SACNoB,EAAMpB,OAAS,cAHd,cAORE,EAAmBuB,WAPX,SAOuBL,EAAOM,GAAS,IAAD,EACJA,EAAOC,QAAtCC,EADmC,EACnCA,QAASC,EAD0B,EAC1BA,KAAMC,EADoB,EACpBA,YAEvBpC,EAAcqC,OAAOX,EAAOQ,GAC5BR,EAAMrB,WAAa+B,EACnBV,EAAMtB,YAAc+B,EACpBT,EAAMpB,OAAS,cAbV,cAgBRE,EAAmB8B,UAhBX,SAgBqBZ,EAAOM,GACjCN,EAAMnB,MAAQyB,EAAOzB,SAjBhB,KAsBFa,IAAf,QACamB,EAAoB,SAAAb,GAAK,OAAIA,EAAMc,OAAOpC,a,EAEFgB,EAAYqB,QAAnDjB,E,EAAAA,SAAUG,E,EAAAA,SAAUC,E,EAAAA,gBAGrBc,EAAkB,SAAAhB,GAAK,OAAIA,EAAMc,OAAOnC,Y,EAKjDL,EAAc2C,cAAa,SAAAjB,GAAK,OAAIA,EAAMc,UAF/BI,E,EAAXC,UACYC,E,EAAZC,WC9EEC,EAAiB/C,cAEjBC,EAAe8C,EAAe7C,gBAAgB,CAChDC,YAAa,EACbC,WAAY,GACZC,OAAQ,OACRC,MAAO,OAGE0C,EAAqB,SAAAvB,GAAK,OAAIA,EAAMX,QAAQX,aAE5C8C,EAAqBzC,YAAiB,6BAAD,uCAC9C,WAAOM,EAAP,wBAAAJ,EAAA,6DAAiBC,EAAjB,EAAiBA,SACG,6CACJ,mCAELR,EAAeQ,IAAWG,QAA1BX,YAEHY,EANR,UACoB,6CADpB,oBAEgB,mCAFhB,gCAMuEZ,GANvE,SAQ2Ba,MAAMD,GARjC,cAQUE,EARV,yBASWA,EAASC,QATpB,2CAD8C,yDAc5CgC,EAAe9B,YAAY,CAC7BC,KAAM,UACNpB,eACAqB,SAAU,CACNC,SAAU,CACNC,QADM,SACEC,GACJA,EAAMtB,gBAGduB,SAAU,CACNF,QADM,SACEC,GACJA,EAAMtB,gBAGdgD,iBAAkB,CACd3B,QADc,SACNC,GACAA,EAAMtB,YAAc,IACpBsB,EAAMtB,YAAc,MAKpCyB,eAAa,mBACRqB,EAAmBpB,SADX,SACoBJ,GACJ,SAAjBA,EAAMpB,SACNoB,EAAMpB,OAAS,cAHd,cAOR4C,EAAmBnB,WAPX,SAOsBL,EAAOM,GAAS,IAAD,EACHA,EAAOC,QAAtCC,EADkC,EAClCA,QAASC,EADyB,EACzBA,KAAMC,EADmB,EACnBA,YAEvBY,EAAeX,OAAOX,EAAOQ,GAC7BR,EAAMrB,WAAa+B,EACnBV,EAAMtB,YAAc+B,EACpBT,EAAMpB,OAAS,cAbV,cAgBR4C,EAAmBZ,UAhBX,SAgBqBZ,EAAOM,GACjCN,EAAMnB,MAAQyB,EAAOzB,SAjBhB,KAsBF4C,IAAf,Q,EAC8EA,EAAaV,QAA7EjB,E,EAAAA,SAAUG,E,EAAAA,SAAkCyB,G,EAAxBC,uB,EAAwBD,kBAE7CE,EAAqB,SAAA5B,GAAK,OAAIA,EAAMX,QAAQT,QAC5CiD,EAAmB,SAAA7B,GAAK,OAAIA,EAAMX,QAAQV,Y,EAKnD2C,EAAeL,cAAa,SAAAjB,GAAK,OAAIA,EAAMX,WAFhCyC,E,EAAXX,UACYY,E,EAAZV,WC7EEW,EAAkBzD,cAElBC,EAAewD,EAAgBvD,gBAAgB,CACjDC,YAAa,EACbC,WAAY,GACZC,OAAQ,OACRC,MAAO,OAGEoD,EAAsB,SAAAjC,GAAK,OAAIA,EAAMkC,SAASxD,aAE9CyD,GAAsBpD,YAAiB,+BAAD,uCAC/C,WAAOmD,EAAP,wBAAAjD,EAAA,6DAAkBC,EAAlB,EAAkBA,SACE,8CACJ,mCAELR,EAAeQ,IAAWgD,SAA1BxD,YAEDY,EANV,UACoB,8CADpB,oBAEgB,mCAFhB,gCAMyEZ,GANzE,SAQ2Ba,MAAMD,GARjC,cAQUE,EARV,yBASWA,EAASC,QATpB,2CAD+C,yDAc7C2C,GAAgBzC,YAAY,CAC9BC,KAAM,WACNpB,eACAqB,SAAU,CACNC,SAAU,CACNC,QADM,SACEC,GACJA,EAAMtB,gBAGduB,SAAU,CACNF,QADM,SACEC,GACJA,EAAMtB,gBAGd2D,kBAAmB,CACftC,QADe,SACPC,GACAA,EAAMtB,YAAc,IACpBsB,EAAMtB,YAAc,MAKpCyB,eAAa,mBACRgC,GAAoB/B,SADZ,SACqBJ,GACL,SAAjBA,EAAMpB,SACNoB,EAAMpB,OAAS,cAHd,cAORuD,GAAoB9B,WAPZ,SAOuBL,EAAOM,GAAS,IAAD,EACJA,EAAOC,QAAtCC,EADmC,EACnCA,QAASC,EAD0B,EAC1BA,KAAMC,EADoB,EACpBA,YAEvBsB,EAAgBrB,OAAOX,EAAOQ,GAC9BR,EAAMrB,WAAa+B,EACnBV,EAAMtB,YAAc+B,EACpBT,EAAMpB,OAAS,cAbV,cAgBRuD,GAAoBvB,UAhBZ,SAgBsBZ,EAAOM,GAClCN,EAAMnB,MAAQyB,EAAOzB,SAjBhB,KAsBFuD,MAAf,Q,GACuDA,GAAcrB,QAAvDjB,G,GAAAA,SAAUG,G,GAAAA,SAAUoC,G,GAAAA,kBAErBC,GAAsB,SAAAtC,GAAK,OAAIA,EAAMkC,SAAStD,QAC9C2D,GAAoB,SAAAvC,GAAK,OAAIA,EAAMkC,SAASvD,Y,GAKrDqD,EAAgBf,cAAa,SAAAjB,GAAK,OAAIA,EAAMkC,YAFjCM,G,GAAXrB,UACYsB,G,GAAZpB,WC7EEqB,GAAkBnE,cAElBC,GAAekE,GAAgBjE,gBAAgB,CACjDC,YAAa,EACbC,WAAY,GACZC,OAAQ,OACRC,MAAO,OAGE8D,GAAsB5D,YAAiB,+BAAD,uCAC/C,WAAO6D,EAAP,wBAAA3D,EAAA,6DAAkBC,EAAlB,EAAkBA,SACE,+CACJ,mCAELR,EAAeQ,IAAW0D,SAA1BlE,YAEDY,EANV,UACoB,+CADpB,oBAEgB,mCAFhB,gCAMyEZ,GANzE,SAQ2Ba,MAAMD,GARjC,cAQUE,EARV,yBASWA,EAASC,QATpB,2CAD+C,yDAc7CoD,GAAgBlD,YAAY,CAC9BC,KAAM,WACNpB,gBACAqB,SAAU,CACNC,SAAU,CACNC,QADM,SACEC,GACJA,EAAMtB,gBAGduB,SAAU,CACNF,QADM,SACEC,GACJA,EAAMtB,gBAGdoE,kBAAmB,CACf/C,QADe,SACPC,GACAA,EAAMtB,YAAc,IACpBsB,EAAMtB,YAAc,MAKpCyB,eAAa,mBACRwC,GAAoBvC,SADZ,SACqBJ,GACL,SAAjBA,EAAMpB,SACNoB,EAAMpB,OAAS,cAHd,cAOR+D,GAAoBtC,WAPZ,SAOuBL,EAAOM,GAAS,IAAD,EACJA,EAAOC,QAAtCC,EADmC,EACnCA,QAASC,EAD0B,EAC1BA,KAAMC,EADoB,EACpBA,YAEvBgC,GAAgB/B,OAAOX,EAAOQ,GAC9BR,EAAMrB,WAAa+B,EACnBV,EAAMtB,YAAc+B,EACpBT,EAAMpB,OAAS,cAbV,cAgBR+D,GAAoB/B,UAhBZ,SAgBsBZ,EAAOM,GAClCN,EAAMnB,MAAQyB,EAAOzB,SAjBhB,KAsBFgE,MAAf,Q,GACuDA,GAAc9B,QAAvDjB,G,GAAAA,SAAUG,G,GAAAA,SAAU6C,G,GAAAA,kBAErBC,GAAsB,SAAA/C,GAAK,OAAIA,EAAM4C,SAAShE,QAC9CoE,GAAoB,SAAAhD,GAAK,OAAIA,EAAM4C,SAASjE,YAC5CsE,GAAsB,SAAAjD,GAAK,OAAIA,EAAM4C,SAASlE,a,GAKvDgE,GAAgBzB,cAAa,SAAAjB,GAAK,OAAIA,EAAM4C,YAFjCM,G,GAAX/B,UACYgC,G,GAAZ9B,WCnES+B,I,MAAS,WAAO,IAAD,EACMC,oBAAS,GADf,mBACjBC,EADiB,KACRC,EADQ,OAEcF,mBAAS,IAFvB,mBAEjBG,EAFiB,KAEJC,EAFI,OAGsBJ,oBAAS,GAH/B,mBAGjBK,EAHiB,KAGAC,EAHA,KAKlBC,EAAW,kBAAC,IAAD,CAAiBC,KAAMC,MAClCC,EAAY,kBAAC,IAAD,CAAiBF,KAAMG,MACnCC,EAAa,kBAAC,IAAD,CAAiBJ,KAAMK,MAEpCC,EAAWC,cAEXC,EAAY,WACdd,GAAYD,GAEZa,EAASzC,KACTyC,EAAS3C,KAET2C,EAASjE,KACTiE,EAASrF,KAETqF,EAAS9B,MACT8B,EAAShC,MAETgC,EAASrB,MACTqB,EAASxB,OAIP2B,EADW,CAAC,OAAQ,UAAW,YAAa,YACzBC,KAAI,SAAAC,GACzB,OACI,wBAAIC,IAAKD,GACL,kBAAC,IAAD,CAASE,OAAK,EAACC,GAAa,SAATH,EAAkB,aAAlB,WAAqCA,GAAQI,QAAS,kBAAMP,MAAkBG,OAoB7G,OACI,gCACI,0BAAMK,UAAU,eAAeD,QAASP,IACvB,IAAZf,EAAoBM,EAAWG,GAGpC,yBAAKc,UAAWvB,EAAU,UAAY,WAClC,4BAAKgB,IAGT,6BAASO,UAAWnB,EAAkB,4BAA8B,6BAChE,uBAAGkB,QAxBK,WAEI,KAAhBpB,IAKAW,EAASrF,EAAmB0E,IAC5BC,EAAe,KALfE,GAAoBD,KAsBK,KAAhBF,EAAqBS,EAAY,kBAAC,IAAD,CAASU,GAAG,mBAAmBV,IAGrE,2BACIa,KAAK,OACLC,MAAOvB,EACPwB,SAjCU,SAAAC,GAAK,OAAIxB,EAAewB,EAAMC,OAAOH,QAkC/CI,YAAY,qBC3E1BC,I,MAAmBzF,YAAY,CACjCC,KAAM,mBACNpB,aANiB,CACjB6G,kBAAkB,GAMlBxF,SAAU,CACN8B,uBAAwB,CACpB5B,QADoB,SACZC,GACJA,EAAMqF,kBAAoBrF,EAAMqF,uBAMlC1D,GAA0ByD,GAAiBrE,QAA3CY,uBACCyD,MAAf,QAEaC,GAAmB,SAAArF,GAAK,OAAIA,EAAMqF,iBAAiBA,kBChBnDC,GAAO,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,MAAeC,GAAkC,EAA1CC,OAA0C,EAAlCD,QAAQE,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,WAC7CzB,EAAWC,cAOjB,OACI,6BAASS,UAAU,OAAOD,QANL,WACrBgB,EAAWD,GACXxB,EAASxC,QAKL,yBAAKkE,IAAG,0CAAqCL,GAAUM,IAAKP,IAC5D,2BAAIA,GACJ,gCAAaQ,IAATL,EAAqBA,EAAKM,MAAM,EAAG,GAAI,mBCR1CC,I,MAAc,SAAC,GAAyB,IAAvBxF,EAAsB,EAAtBA,KAAMyF,EAAgB,EAAhBA,UAC1BC,EAAqBC,YAAY7E,GACjC8E,EAAmBD,YAAYvE,GAE/ByE,EAAsBF,YAAYnD,IAClCsD,EAAoBH,YAAYpD,IAEhCwD,EAAsBJ,YAAYnE,GAClCwE,EAAgBL,YAAY7D,IAE5BmE,EAAoBN,YAAYvF,GAChC8F,EAAoBP,YAAYpF,GAEhCtC,EACO,YAAT+B,EAAqB0F,EACZ,cAAT1F,EAAuB6F,EACd,aAAT7F,EAAsB+F,EAAsBE,EAE1CE,EACO,YAATnG,EAAqB4F,EACZ,cAAT5F,EAAuB8F,EACd,aAAT9F,EAAsBgG,EAAgBE,EAE1C,OACI,6BAAS9B,UAAU,eACf,sCAAQpE,EAAR,YAAyB,WAATA,EAAoB,SAAU,WAC7CyF,GACG,2BAAG,kBAAC,IAAD,CAASvB,GAAE,WAAMlE,IAAjB,gBAELyF,GAAa,mCAASxH,EAAT,OAA0BkI,MC3BxCC,I,YAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrBC,EAAsBX,aAAY,SAAApG,GAAK,OAAI+B,EAAuB/B,EAAO8G,MACzEE,EAAuBZ,aAAY,SAAApG,GAAK,OAAImD,GAAwBnD,EAAO8G,MAC3EG,EAAuBb,aAAY,SAAApG,GAAK,OAAIyC,GAAwBzC,EAAO8G,MAC3EI,EAAqBd,aAAY,SAAApG,GAAK,OAAIoB,EAAsBpB,EAAO8G,MAEvEK,OAAgCpB,IAAxBgB,EAAoCA,OACrBhB,IAAzBiB,EAAqCA,OACRjB,IAAzBkB,EAAqCA,EAAuBC,EAE5D3B,EAA8F4B,EAA9F5B,MAAO6B,EAAuFD,EAAvFC,SAAwB3B,EAA+D0B,EAA7EE,aAAqCC,EAAwCH,EAAvDI,cAA8C7B,EAASyB,EAAvBK,aAEzEzD,EAAY,kBAAC,IAAD,CAAiBF,KAAMG,MAEnCG,EAAWC,cAMjB,OACI,oCACI,6BAASS,UAAU,aAAa4C,MAAO,CAAEH,gBAAgB,uCAAD,OAAyCA,EAAzC,QACxD,6BAASzC,UAAU,QACf,iCACI,4BAAKU,GACL,uBAAGV,UAAU,UAAb,UAA0BY,EAA1B,QACA,uBAAGZ,UAAU,aAAiBkB,IAATL,EAAqBA,EAAKM,MAAM,EAAG,GAAK,KAC7D,uBAAGnB,UAAU,YAAYuC,IAE7B,4BAAQxC,QAdK,WACrBT,EAASxC,QAamCoC,OC9BvC2D,GAAO,WAAO,IAAD,EACQrE,mBAAS,IADjB,mBACfyD,EADe,KACNlB,EADM,KAGhBzB,EAAWC,cAEXuD,EAAqBvB,YAAYtE,GAAqBkE,MAAM,EAAG,GAC/D4B,EAAsBxB,YAAYlD,IAAsB8C,MAAM,EAAG,GACjE6B,EAAsBzB,YAAY5D,IAAsBwD,MAAM,EAAG,GAEjE8B,EAAgB1B,YAAYxE,GAC5BmG,EAAiB3B,YAAYrD,IAC7BiF,EAAiB5B,YAAY9D,IAE7B2F,EAAkB7B,YAAYf,IAEpC6C,qBAAU,WACgB,SAAlBJ,GACA3D,EAAS3C,KAEU,SAAnBwG,GACA7D,EAAShC,MAEU,SAAnB4F,GACA5D,EAASxB,QAGd,CAACmF,EAAeC,EAAgBC,EAAgB7D,IAEnD,IAAMgE,EAAgBR,EAAmBpD,KAAI,SAAA6D,GAAW,IAC5C7C,EAA6E6C,EAA7E7C,MAAqBE,EAAwD2C,EAAtEf,aAAmC7B,EAAmC4C,EAAhDC,YAAmC3C,EAAa0C,EAA3BZ,aAAoB7B,EAAOyC,EAAPzC,GAE9E,OAAO,kBAAC,GAAD,CAAMJ,MAAOA,EAAOE,OAAQA,EAAQD,OAAQA,EAAQE,KAAMA,EAAME,WAAYA,EAAYD,GAAIA,EAAIlB,IAAKc,EAAQE,OAGlH6C,EAAiBV,EAAoBrD,KAAI,SAAA6D,GAAW,IAC9C7C,EAA6E6C,EAA7E7C,MAAqBE,EAAwD2C,EAAtEf,aAAmC7B,EAAmC4C,EAAhDC,YAAmC3C,EAAa0C,EAA3BZ,aAAoB7B,EAAOyC,EAAPzC,GAE9E,OAAO,kBAAC,GAAD,CAAMJ,MAAOA,EAAOE,OAAQA,EAAQD,OAAQA,EAAQE,KAAMA,EAAME,WAAYA,EAAYD,GAAIA,EAAIlB,IAAKc,EAAQE,OAGlH8C,EAAiBV,EAAoBtD,KAAI,SAAA6D,GAAW,IAC9C7C,EAA6E6C,EAA7E7C,MAAqBE,EAAwD2C,EAAtEf,aAAmC7B,EAAmC4C,EAAhDC,YAAmC3C,EAAa0C,EAA3BZ,aAAoB7B,EAAOyC,EAAPzC,GAE9E,OAAO,kBAAC,GAAD,CAAMJ,MAAOA,EAAOE,OAAQA,EAAQD,OAAQA,EAAQE,KAAMA,EAAME,WAAYA,EAAYD,GAAIA,EAAIlB,IAAKc,EAAQE,OAGxH,OACI,8BACKwC,GAAmB,kBAAC,GAAD,CAAcnB,QAASA,KAEzCmB,GACE,oCACI,6BAASpD,UAAU,iBACf,kBAAC,GAAD,CAAapE,KAAK,UAAUyF,WAAW,IACvC,6BAASrB,UAAU,aAAasD,IAGpC,6BAAStD,UAAU,iBACf,kBAAC,GAAD,CAAapE,KAAK,WAAWyF,WAAW,IACxC,6BAASrB,UAAU,aAAa0D,IAGpC,6BAAS1D,UAAU,iBACf,kBAAC,GAAD,CAAapE,KAAK,YAAYyF,WAAW,IACzC,6BAASrB,UAAU,aAAayD,OCnE3CE,I,MAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnBtC,EAAqBC,YAAY7E,GACjC8E,EAAmBD,YAAYvE,GAE/ByE,EAAsBF,YAAYnD,IAClCsD,EAAoBH,YAAYpD,IAEhCwD,EAAsBJ,YAAYnE,GAClCwE,EAAgBL,YAAY7D,IAE5BmE,EAAoBN,YAAYvF,GAChC6H,EAAkBtC,YAAYpF,GAE9BtC,EACW,YAAb+J,EAAyBtC,EACZ,cAAbsC,EAA2BnC,EACd,aAAbmC,EAA0BjC,EAAsBE,EAE9CE,EACW,YAAb6B,EAAyBpC,EACZ,cAAboC,EAA2BlC,EACd,aAAbkC,EAA0BhC,EAAgBiC,EAExC5I,EACW,YAAb2I,EAAyBE,EACZ,cAAbF,EAA2BG,GACd,aAAbH,EAA0BI,GAAmBC,EAE3C7I,EACW,YAAbwI,EAAyBM,EACZ,cAAbN,EAA2BO,GACd,aAAbP,EAA0BQ,GAAkBC,EAE1CC,EACW,YAAbV,EAAyBjH,EACZ,cAAbiH,EAA2B9F,GACd,aAAb8F,EAA0BtG,GAAqBrD,EAE7CqF,EAAWC,cAWjB,OACI,6BAASS,UAAU,cACE,IAAhBnG,GAAqB,4BAAQkG,QAPf,WACnBT,EAASlE,KACTkE,EAASgF,OAKiB,QACtB,mCAASzK,EAAT,OAA0BkI,GACzBlI,IAAgBkI,GAAa,4BAAQhC,QAbvB,WACnBT,EAASrE,KACTqE,EAASgF,OAWyB,WCpD7BC,GAAW,WAAO,IAAD,EACI/F,mBAAS,IADb,mBACnByD,EADmB,KACVlB,EADU,KAKpB0C,EAFsBlC,YAAYlD,IAEGqB,KAAI,SAAA6D,GAAW,IAC9C7C,EAA6E6C,EAA7E7C,MAAqBE,EAAwD2C,EAAtEf,aAAmC7B,EAAmC4C,EAAhDC,YAAmC3C,EAAa0C,EAA3BZ,aAAoB7B,EAAOyC,EAAPzC,GAE9E,OAAO,kBAAC,GAAD,CAAMJ,MAAOA,EAAOE,OAAQA,EAAQD,OAAQA,EAAQE,KAAMA,EAAME,WAAYA,EAAYD,GAAIA,EAAIlB,IAAKc,EAAQE,OAGlHtB,EAAWC,cAEX2D,EAAiB3B,YAAYrD,IAC7BkF,EAAkB7B,YAAYf,IASpC,OAPA6C,qBAAU,WACiB,SAAnBH,GACA5D,EAASxB,QAGd,CAACoF,EAAgB5D,IAGhB,8BACK8D,GAAmB,kBAAC,GAAD,CAAcnB,QAASA,KACzCmB,GACE,6BAASpD,UAAU,iBACf,kBAAC,GAAD,CAAapE,KAAK,cAClB,6BAASoE,UAAU,aAAayD,GAChC,kBAAC,GAAD,CAAYG,SAAS,iBC9B5BY,GAAW,WAAO,IAAD,EACIhG,mBAAS,IADb,mBACnByD,EADmB,KACVlB,EADU,KAKpB2C,EAFsBnC,YAAY5D,IAEG+B,KAAI,SAAA6D,GAAW,IAC9C7C,EAA6E6C,EAA7E7C,MAAqBE,EAAwD2C,EAAtEf,aAAmC7B,EAAmC4C,EAAhDC,YAAmC3C,EAAa0C,EAA3BZ,aAAoB7B,EAAOyC,EAAPzC,GAE9E,OAAO,kBAAC,GAAD,CAAMJ,MAAOA,EAAOE,OAAQA,EAAQD,OAAQA,EAAQE,KAAMA,EAAME,WAAYA,EAAYD,GAAIA,EAAIlB,IAAKc,EAAQE,OAGlHtB,EAAWC,cAEX4D,EAAiB5B,YAAY9D,IAC7B2F,EAAkB7B,YAAYf,IASpC,OAPA6C,qBAAU,WACiB,SAAnBF,GACA7D,EAAShC,QAGd,CAAC6F,EAAgB7D,IAGhB,8BACK8D,GAAmB,kBAAC,GAAD,CAAcnB,QAASA,KACzCmB,GACE,6BAASpD,UAAU,iBACf,kBAAC,GAAD,CAAapE,KAAK,aAClB,6BAASoE,UAAU,aAAa0D,GAChC,kBAAC,GAAD,CAAYE,SAAS,gBC9B5Ba,GAAU,WAAO,IAAD,EACKjG,mBAAS,IADd,mBAClByD,EADkB,KACTlB,EADS,KAKnBuC,EAFqB/B,YAAYtE,GAEEyC,KAAI,SAAA6D,GAAW,IAC5C7C,EAA6E6C,EAA7E7C,MAAqBE,EAAwD2C,EAAtEf,aAAmC7B,EAAmC4C,EAAhDC,YAAmC3C,EAAa0C,EAA3BZ,aAAoB7B,EAAOyC,EAAPzC,GAE9E,OAAO,kBAAC,GAAD,CAAMJ,MAAOA,EAAOE,OAAQA,EAAQD,OAAQA,EAAQE,KAAMA,EAAME,WAAYA,EAAYD,GAAIA,EAAIlB,IAAKc,EAAQE,OAGlHqC,EAAgB1B,YAAYxE,GAC5BqG,EAAkB7B,YAAYf,IAE9BlB,EAAWC,cASjB,OAPA8D,qBAAU,WACgB,SAAlBJ,GACA3D,EAAS3C,OAGd,CAACsG,EAAe3D,IAGf,8BACK8D,GAAmB,kBAAC,GAAD,CAAcnB,QAASA,KACzCmB,GACE,6BAASpD,UAAU,iBACf,kBAAC,GAAD,CAAapE,KAAK,YAClB,6BAASoE,UAAU,aAAasD,GAChC,kBAAC,GAAD,CAAYM,SAAS,eC9B5Bc,GAAgB,WAAO,IAAD,EACDlG,mBAAS,IADR,mBACxByD,EADwB,KACflB,EADe,KAGzB4D,EAAoBpD,YAAYlF,GAChC+G,EAAkB7B,YAAYf,IAE9BoE,EAAgBD,EAAkBjF,KAAI,SAAA6D,GAAW,IAC3C7C,EAA6E6C,EAA7E7C,MAAqBE,EAAwD2C,EAAtEf,aAAmC7B,EAAmC4C,EAAhDC,YAAmC3C,EAAa0C,EAA3BZ,aAAoB7B,EAAOyC,EAAPzC,GAE9E,OAAO,kBAAC,GAAD,CAAMJ,MAAOA,EAAOE,OAAQA,EAAQD,OAAQA,EAAQE,KAAMA,EAAME,WAAYA,EAAYD,GAAIA,EAAIlB,IAAKc,EAAQE,OAGxH,OACI,8BACKwC,GAAmB,kBAAC,GAAD,CAAcnB,QAASA,KACzCmB,GACE,6BAASpD,UAAU,iBACf,kBAAC,GAAD,CAAapE,KAAK,WAClB,6BAASoE,UAAU,aAAa4E,GAChC,kBAAC,GAAD,CAAYhB,SAAS,cCnB5BiB,GAAM,WACf,OACI,kBAAC,IAAD,KACI,kBAAC,GAAD,MAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,cAAa,kBAAC,GAAD,OACzB,kBAAC,IAAD,CAAOA,KAAK,cAAa,kBAAC,GAAD,OACzB,kBAAC,IAAD,CAAOA,KAAK,aAAY,kBAAC,GAAD,OACxB,kBAAC,IAAD,CAAOA,KAAK,YAAW,kBAAC,GAAD,OACvB,kBAAC,IAAD,CAAOA,KAAK,mBAAkB,kBAAC,GAAD,UCZxC9J,GAAW,CACbR,QAASuK,EACThH,SAAUiH,GACV3H,SAAU4H,GACVhJ,OAAQiJ,EACR1E,iBAAkB2E,IAGTC,GAAQC,YAAe,CAChCnK,QAASF,KCTPsK,I,MAAcC,SAASC,cAAc,UAE3CC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,IACb,kBAAC,GAAD,OAEJE,M","file":"static/js/main.adc722b9.chunk.js","sourcesContent":["import {createAsyncThunk, createEntityAdapter, createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst searchAdapter = createEntityAdapter();\r\n\r\nconst initialState = searchAdapter.getInitialState({\r\n    currentPage: 1,\r\n    totalPages: \"\",\r\n    status: \"idle\",\r\n    error: null\r\n});\r\n\r\nexport const fetchSearchResults = createAsyncThunk(\"search/fetchSearchResults\",\r\n    async (query, {getState}) => {\r\n        const queryString = encodeURI(query);\r\n        const api_url = \"https://api.themoviedb.org/3/search/movie\";\r\n        const key = \"600f5cedd909fa355f1beee66846ab98\";\r\n\r\n        const {currentPage} = getState().popular;\r\n\r\n        let request_url = `${api_url}?api_key=${key}&query=${queryString}&language=en-US&page=${currentPage}&include_adult=false`;\r\n\r\n        const response = await fetch(request_url);\r\n        return response.json();\r\n    }\r\n)\r\n\r\nconst searchSlice = createSlice({\r\n    name: \"search\",\r\n    initialState,\r\n    reducers: {\r\n        nextPage: {\r\n            reducer(state) {\r\n                state.currentPage++;\r\n            }\r\n        }, \r\n        prevPage: {\r\n            reducer(state) {\r\n                state.currentPage--;\r\n            }\r\n        },\r\n        resetSearchPage: {\r\n            reducer(state) {\r\n                if (state.currentPage > 1) {\r\n                    state.currentPage = 1;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchSearchResults.pending] (state) {\r\n            if (state.status === \"idle\") {\r\n                state.status = \"pending\";\r\n            }\r\n        },\r\n\r\n        [fetchSearchResults.fulfilled] (state, action) {\r\n            const { results, page, total_pages } = action.payload;\r\n\r\n            searchAdapter.setAll(state, results);\r\n            state.totalPages = total_pages;\r\n            state.currentPage = page;\r\n            state.status = \"succeded\";\r\n        },\r\n\r\n        [fetchSearchResults.rejected](state, action) {\r\n            state.error = action.error;\r\n        }\r\n    }\r\n});\r\n\r\nexport default searchSlice.reducer;\r\nexport const currentSearchPage = state => state.search.currentPage;\r\n\r\nexport const {nextPage, prevPage, resetSearchPage} = searchSlice.actions;\r\n\r\nexport const searchMovieStatus = state => state.search.status;\r\nexport const totalSearchPage = state => state.search.totalPages;\r\n\r\nexport const {\r\n    selectAll: selectSearchMovies,\r\n    selectById: selectSearchMovieById\r\n} = searchAdapter.getSelectors(state => state.search)","import { createSlice, createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\r\n\r\nconst popularAdapter = createEntityAdapter();\r\n\r\nconst initialState = popularAdapter.getInitialState({\r\n    currentPage: 1,\r\n    totalPages: \"\",\r\n    status: \"idle\",\r\n    error: null\r\n});\r\n\r\nexport const currentPopularPage = state => state.popular.currentPage;\r\n\r\nexport const fetchPopularMovies = createAsyncThunk(\"popular/fetchPopularMovies\",\r\n    async (popular, {getState}) => {\r\n        const api_url = \"https://api.themoviedb.org/3/movie/popular\";\r\n        const key = \"600f5cedd909fa355f1beee66846ab98\";\r\n\r\n        const {currentPage} = getState().popular;\r\n\r\n        let request_url = `${api_url}?api_key=${key}&language=en-US&page=${currentPage}`;\r\n\r\n        const response = await fetch(request_url);\r\n        return response.json();\r\n    }\r\n)\r\n\r\nconst popularSlice = createSlice({\r\n    name: \"popular\",\r\n    initialState,\r\n    reducers: {\r\n        nextPage: {\r\n            reducer(state) {\r\n                state.currentPage++;\r\n            }\r\n        }, \r\n        prevPage: {\r\n            reducer(state) {\r\n                state.currentPage--;\r\n            }\r\n        },\r\n        resetPopularPage: {\r\n            reducer(state) {\r\n                if (state.currentPage > 1) {\r\n                    state.currentPage = 1;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchPopularMovies.pending](state) {\r\n            if (state.status === \"idle\") {\r\n                state.status = \"pending\";\r\n            }\r\n        },\r\n\r\n        [fetchPopularMovies.fulfilled](state, action) {\r\n            const { results, page, total_pages } = action.payload;\r\n\r\n            popularAdapter.setAll(state, results);\r\n            state.totalPages = total_pages;\r\n            state.currentPage = page;\r\n            state.status = \"succeded\";\r\n        },\r\n\r\n        [fetchPopularMovies.rejected](state, action) {\r\n            state.error = action.error;\r\n        }\r\n    }\r\n});\r\n\r\nexport default popularSlice.reducer;\r\nexport const {nextPage, prevPage, toggleShowMovieDetails, resetPopularPage} = popularSlice.actions;\r\n\r\nexport const popularMovieStatus = state => state.popular.status;\r\nexport const totalPopularPage = state => state.popular.totalPages;\r\n\r\nexport const {\r\n    selectAll: selectPopularMovies,\r\n    selectById: selectPopularMovieByID\r\n} = popularAdapter.getSelectors(state => state.popular)","import { createSlice, createEntityAdapter, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst upComingAdapter = createEntityAdapter();\r\n\r\nconst initialState = upComingAdapter.getInitialState({\r\n    currentPage: 1,\r\n    totalPages: \"\",\r\n    status: \"idle\",\r\n    error: null\r\n});\r\n\r\nexport const currentUpComingPage = state => state.upComing.currentPage;\r\n\r\nexport const fetchUpComingMovies = createAsyncThunk(\"upComing/fetchupComingMovies\",\r\n    async (upComing, {getState}) => {\r\n        const api_url = \"https://api.themoviedb.org/3/movie/upcoming\";\r\n        const key = \"600f5cedd909fa355f1beee66846ab98\";\r\n\r\n        const {currentPage} = getState().upComing;\r\n\r\n        const request_url = `${api_url}?api_key=${key}&language=en-US&page=${currentPage}`;\r\n\r\n        const response = await fetch(request_url);\r\n        return response.json();\r\n    }\r\n);\r\n\r\nconst upComingSlice = createSlice({\r\n    name: \"upComing\",\r\n    initialState,\r\n    reducers: {\r\n        nextPage: {\r\n            reducer(state) {\r\n                state.currentPage++;\r\n            }\r\n        }, \r\n        prevPage: {\r\n            reducer(state) {\r\n                state.currentPage--;\r\n            }\r\n        },\r\n        resetUpComingPage: {\r\n            reducer(state) {\r\n                if (state.currentPage > 1) {\r\n                    state.currentPage = 1;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchUpComingMovies.pending](state) {\r\n            if (state.status === \"idle\") {\r\n                state.status = \"pending\";\r\n            }\r\n        },\r\n\r\n        [fetchUpComingMovies.fulfilled](state, action) {\r\n            const { results, page, total_pages } = action.payload;\r\n\r\n            upComingAdapter.setAll(state, results);\r\n            state.totalPages = total_pages;\r\n            state.currentPage = page;\r\n            state.status = \"succeded\";\r\n        },\r\n\r\n        [fetchUpComingMovies.rejected](state, action) {\r\n            state.error = action.error;\r\n        }\r\n    }\r\n});\r\n\r\nexport default upComingSlice.reducer;\r\nexport const {nextPage, prevPage, resetUpComingPage} = upComingSlice.actions;\r\n\r\nexport const upComingMovieStatus = state => state.upComing.status;\r\nexport const totalUpComingPage = state => state.upComing.totalPages;\r\n\r\nexport const {\r\n    selectAll: selectUpComingMovies,\r\n    selectById: selectUpComingMovieById\r\n} = upComingAdapter.getSelectors(state => state.upComing);","import { createSlice, createEntityAdapter, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst topRatedAdapter = createEntityAdapter();\r\n\r\nconst initialState = topRatedAdapter.getInitialState({\r\n    currentPage: 1,\r\n    totalPages: \"\",\r\n    status: \"idle\",\r\n    error: null\r\n});\r\n\r\nexport const fetchtopRatedMovies = createAsyncThunk(\"topRated/fetchtopRatedMovies\",\r\n    async (topRated, {getState}) => {\r\n        const api_url = \"https://api.themoviedb.org/3/movie/top_rated\";\r\n        const key = \"600f5cedd909fa355f1beee66846ab98\";\r\n\r\n        const {currentPage} = getState().topRated;\r\n\r\n        const request_url = `${api_url}?api_key=${key}&language=en-US&page=${currentPage}`;\r\n\r\n        const response = await fetch(request_url);\r\n        return response.json();\r\n    }\r\n);\r\n\r\nconst topRatedSlice = createSlice({\r\n    name: \"topRated\",\r\n    initialState,\r\n    reducers: {\r\n        nextPage: {\r\n            reducer(state) {\r\n                state.currentPage++;\r\n            }\r\n        }, \r\n        prevPage: {\r\n            reducer(state) {\r\n                state.currentPage--;\r\n            }\r\n        },\r\n        resetTopRatedPage: {\r\n            reducer(state) {\r\n                if (state.currentPage > 1) {\r\n                    state.currentPage = 1;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchtopRatedMovies.pending](state) {\r\n            if (state.status === \"idle\") {\r\n                state.status = \"pending\";\r\n            }\r\n        },\r\n\r\n        [fetchtopRatedMovies.fulfilled](state, action) {\r\n            const { results, page, total_pages } = action.payload;\r\n\r\n            topRatedAdapter.setAll(state, results);\r\n            state.totalPages = total_pages;\r\n            state.currentPage = page;\r\n            state.status = \"succeded\";\r\n        },\r\n\r\n        [fetchtopRatedMovies.rejected](state, action) {\r\n            state.error = action.error;\r\n        }\r\n    }\r\n});\r\n\r\nexport default topRatedSlice.reducer;\r\nexport const {nextPage, prevPage, resetTopRatedPage} = topRatedSlice.actions;\r\n\r\nexport const topRatedMovieStatus = state => state.topRated.status;\r\nexport const totalTopRatedPage = state => state.topRated.totalPages;\r\nexport const currentTopRatedPage = state => state.topRated.currentPage;\r\n\r\nexport const {\r\n    selectAll: selectTopRatedMovies,\r\n    selectById: selectTopRatedMovieById\r\n} = topRatedAdapter.getSelectors(state => state.topRated);","import React, { useState, useRef } from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes, faBars, faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { fetchSearchResults, resetSearchPage} from \"../slices/searchSlice\";\r\nimport {resetPopularPage, fetchPopularMovies} from \"../slices/popularSlice\";\r\nimport {resetUpComingPage, fetchUpComingMovies} from \"../slices/upComingSlice\";\r\nimport {fetchtopRatedMovies, resetTopRatedPage} from \"../slices/topRatedSlice\";\r\nimport \"./Header.css\";\r\n\r\nexport const Header = () => {\r\n    const [showNav, setShowNav] = useState(false);\r\n    const [searchInput, setSearchInput] = useState(\"\");\r\n    const [showSearchInput, setShowSearchInput] = useState(false);\r\n\r\n    const barsIcon = <FontAwesomeIcon icon={faBars} />;\r\n    const timesIcon = <FontAwesomeIcon icon={faTimes} />;\r\n    const searchIcon = <FontAwesomeIcon icon={faSearch} />;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const toggleNav = () => {\r\n        setShowNav(!showNav);\r\n\r\n        dispatch(resetPopularPage());\r\n        dispatch(fetchPopularMovies());\r\n\r\n        dispatch(resetSearchPage());\r\n        dispatch(fetchSearchResults());\r\n\r\n        dispatch(resetUpComingPage());\r\n        dispatch(fetchUpComingMovies());\r\n\r\n        dispatch(resetTopRatedPage());\r\n        dispatch(fetchtopRatedMovies());\r\n    }\r\n\r\n    const navItems = [\"Home\", \"Popular\", \"Top Rated\", \"Upcoming\"];\r\n    const navMenu = navItems.map(item => {\r\n        return (\r\n            <li key={item}>\r\n                <NavLink exact to={item === \"Home\" ? \"/Movie-App\" : `/${item}`} onClick={() => toggleNav(item)}>{item}</NavLink>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    const handleSearchInput = event => setSearchInput(event.target.value);\r\n\r\n    const searchMovie = () => {\r\n\r\n        if (searchInput === \"\") {\r\n            setShowSearchInput(!showSearchInput);\r\n        } \r\n\r\n        else {\r\n            dispatch(fetchSearchResults(searchInput));\r\n            setSearchInput(\"\");\r\n            setShowSearchInput(!showSearchInput);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <header>\r\n            <span className=\"toggleNavBtn\" onClick={toggleNav}>\r\n                {showNav === false ? barsIcon : timesIcon}\r\n            </span>\r\n\r\n            <nav className={showNav ? \"showNav\" : \"hideNav\"}>\r\n                <ul>{navMenu}</ul>\r\n            </nav>\r\n\r\n            <section className={showSearchInput ? \"searchBtn showSearchInput\" : \"searchBtn hideSearchInput\"}>\r\n                <p onClick={searchMovie} >\r\n                    {searchInput === \"\" ? searchIcon: <NavLink to=\"/Search Results\">{searchIcon}</NavLink>}\r\n                </p>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    value={searchInput}\r\n                    onChange={handleSearchInput}\r\n                    placeholder=\"Search Movie\"\r\n                />\r\n            </section>\r\n\r\n        </header>\r\n    );\r\n};","import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    showMovieDetails: false\r\n};\r\n\r\nconst movieDetailSlice = createSlice({\r\n    name: \"showMovieDetails\",\r\n    initialState,\r\n    reducers: {\r\n        toggleShowMovieDetails: {\r\n            reducer(state) {\r\n                state.showMovieDetails = !state.showMovieDetails;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const {toggleShowMovieDetails} = movieDetailSlice.actions;\r\nexport default movieDetailSlice.reducer;\r\n\r\nexport const showMovieDetails = state => state.showMovieDetails.showMovieDetails;","import React from \"react\";\r\nimport \"./Card.css\";\r\nimport {toggleShowMovieDetails} from \"../slices/movieDetailSlice\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const Card = ({title, rating, poster, year, id, setMovieId}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSetMovieId = () => {\r\n        setMovieId(id);\r\n        dispatch(toggleShowMovieDetails());\r\n    };\r\n\r\n    return(\r\n        <section className=\"card\" onClick={handleSetMovieId}>\r\n            <img src={`https://image.tmdb.org/t/p/w500/${poster}`} alt={title}/>\r\n            <p>{title}</p>\r\n            <p>{year !== undefined ? year.slice(0, 4): \"Not Available\"}</p>\r\n        </section>\r\n    );\r\n};","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport \"./PageHeading.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { totalPopularPage, currentPopularPage } from \"../../slices/popularSlice\";\r\nimport { totalTopRatedPage, currentTopRatedPage } from \"../../slices/topRatedSlice\";\r\nimport { totalUpComingPage, currentUpComingPage } from \"../../slices/upComingSlice\";\r\nimport { totalSearchPage, currentSearchPage} from \"../../slices/searchSlice\";\r\n\r\nexport const PageHeading = ({ page, browseAll }) => {\r\n    const popularPageCurrent = useSelector(currentPopularPage);\r\n    const popularPageTotal = useSelector(totalPopularPage);\r\n    \r\n    const topRatedPageCurrent = useSelector(currentTopRatedPage);\r\n    const topRatedPageTotal = useSelector(totalTopRatedPage);\r\n\r\n    const upComingPageCurrent = useSelector(currentUpComingPage);\r\n    const upComingTotal = useSelector(totalUpComingPage);\r\n\r\n    const searchPageCurrent = useSelector(currentSearchPage);\r\n    const searchResultTotal = useSelector(totalSearchPage);\r\n\r\n    const currentPage =\r\n        page === \"Popular\" ? popularPageCurrent :\r\n        page === \"Top Rated\" ? topRatedPageCurrent : \r\n        page === \"upComing\" ? upComingPageCurrent : searchPageCurrent;\r\n\r\n    const totalPage =\r\n        page === \"Popular\" ? popularPageTotal :\r\n        page === \"Top Rated\" ? topRatedPageTotal : \r\n        page === \"upComing\" ? upComingTotal : searchResultTotal;\r\n\r\n    return (\r\n        <section className=\"pageHeading\">\r\n            <h1>{`${page} ${page === \"Search\" ? \"Result\": \"Movies\"}`}</h1>\r\n            {browseAll &&\r\n                <p><NavLink to={`/${page}`}>Browse All</NavLink></p>\r\n            }\r\n            {!browseAll && <p>Page {currentPage} of {totalPage}</p>}\r\n        </section>\r\n    );\r\n};","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectPopularMovieByID } from \"../slices/popularSlice\";\r\nimport { selectTopRatedMovieById } from \"../slices/topRatedSlice\";\r\nimport { selectUpComingMovieById } from \"../slices/upComingSlice\";\r\nimport { selectSearchMovieById } from \"../slices/searchSlice\";\r\nimport {toggleShowMovieDetails} from \"../slices/movieDetailSlice\";\r\nimport \"./MovieDetails.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const MovieDetails = ({ MovieId }) => {\r\n    const popularMovieDetails = useSelector(state => selectPopularMovieByID(state, MovieId));\r\n    const topRatedMovieDetails = useSelector(state => selectTopRatedMovieById(state, MovieId));\r\n    const upComingMovieDetails = useSelector(state => selectUpComingMovieById(state, MovieId));\r\n    const searchMovieDetails = useSelector(state => selectSearchMovieById(state, MovieId));\r\n\r\n    const movie = popularMovieDetails !== undefined ? popularMovieDetails :\r\n        topRatedMovieDetails !== undefined ? topRatedMovieDetails :\r\n            upComingMovieDetails !== undefined ? upComingMovieDetails : searchMovieDetails;\r\n\r\n    const { title, overview, vote_average: rating, backdrop_path: backgroundImage, release_date: year } = movie;\r\n\r\n    const timesIcon = <FontAwesomeIcon icon={faTimes} />;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSetMovieId = () => {\r\n        dispatch(toggleShowMovieDetails());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <section className=\"background\" style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w500/${backgroundImage})` }}></section>\r\n            <section className=\"text\">\r\n                <section>\r\n                    <h1>{title}</h1>\r\n                    <p className=\"rating\">{`${rating}/10`}</p>\r\n                    <p className=\"year\">{year !== undefined ? year.slice(0, 4) : \" \"}</p>\r\n                    <p className=\"overview\">{overview}</p>\r\n                </section>\r\n                <button onClick={handleSetMovieId}>{timesIcon}</button>\r\n            </section>\r\n            \r\n        </>\r\n    );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchPopularMovies, popularMovieStatus, selectPopularMovies } from \"../../slices/popularSlice\";\r\nimport { fetchtopRatedMovies, topRatedMovieStatus, selectTopRatedMovies } from \"../../slices/topRatedSlice\";\r\nimport { fetchUpComingMovies, upComingMovieStatus, selectUpComingMovies } from \"../../slices/upComingSlice\";\r\nimport { Card } from \"../../card/Card\";\r\nimport { PageHeading } from \"../pageHeading/PageHeading\";\r\nimport \"./Home.css\"\r\nimport { showMovieDetails } from \"../../slices/movieDetailSlice\";\r\nimport { MovieDetails } from \"../MovieDetails\";\r\n\r\nexport const Home = () => {\r\n    const [MovieId, setMovieId] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const popularMoviesArray = useSelector(selectPopularMovies).slice(0, 4);\r\n    const topRatedMoviesArray = useSelector(selectTopRatedMovies).slice(0, 4);\r\n    const upComingMoviesArray = useSelector(selectUpComingMovies).slice(0, 4);\r\n\r\n    const popularStatus = useSelector(popularMovieStatus);\r\n    const topRatedStatus = useSelector(topRatedMovieStatus);\r\n    const upComingStatus = useSelector(upComingMovieStatus);\r\n\r\n    const showMovieDetail = useSelector(showMovieDetails);\r\n\r\n    useEffect(() => {\r\n        if (popularStatus === \"idle\") {\r\n            dispatch(fetchPopularMovies());\r\n        }\r\n        if (upComingStatus === \"idle\") {\r\n            dispatch(fetchUpComingMovies());\r\n        }\r\n        if (topRatedStatus === \"idle\") {\r\n            dispatch(fetchtopRatedMovies());\r\n        }\r\n\r\n    }, [popularStatus, topRatedStatus, upComingStatus, dispatch]);\r\n\r\n    const popularMovies = popularMoviesArray.map(movies => {\r\n        const { title, vote_average: rating, poster_path: poster, release_date: year, id } = movies;\r\n\r\n        return <Card title={title} rating={rating} poster={poster} year={year} setMovieId={setMovieId} id={id} key={title + rating} />\r\n    });\r\n\r\n    const topRatedMovies = topRatedMoviesArray.map(movies => {\r\n        const { title, vote_average: rating, poster_path: poster, release_date: year, id } = movies;\r\n\r\n        return <Card title={title} rating={rating} poster={poster} year={year} setMovieId={setMovieId} id={id} key={title + rating} />\r\n    });\r\n\r\n    const upComingMovies = upComingMoviesArray.map(movies => {\r\n        const { title, vote_average: rating, poster_path: poster, release_date: year, id } = movies;\r\n\r\n        return <Card title={title} rating={rating} poster={poster} year={year} setMovieId={setMovieId} id={id} key={title + rating} />\r\n    });\r\n\r\n    return (\r\n        <main>\r\n            {showMovieDetail && <MovieDetails MovieId={MovieId} />}\r\n\r\n            {!showMovieDetail &&\r\n                <>\r\n                    <section className=\"movieCategory\">\r\n                        <PageHeading page=\"Popular\" browseAll={true} />\r\n                        <section className=\"movieList\">{popularMovies}</section>\r\n                    </section>\r\n\r\n                    <section className=\"movieCategory\">\r\n                        <PageHeading page=\"Upcoming\" browseAll={true} />\r\n                        <section className=\"movieList\">{upComingMovies}</section>\r\n                    </section>\r\n\r\n                    <section className=\"movieCategory\">\r\n                        <PageHeading page=\"Top Rated\" browseAll={true} />\r\n                        <section className=\"movieList\">{topRatedMovies}</section>\r\n                    </section>\r\n                </>\r\n            }\r\n        </main>\r\n    );\r\n};","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchPopularMovies, totalPopularPage, currentPopularPage, nextPage as nextPopularPage, prevPage as prevPopularPage } from \"../../slices/popularSlice\";\r\nimport { fetchtopRatedMovies, totalTopRatedPage, currentTopRatedPage, nextPage as nextTopRatedPage, prevPage as prevTopRatedPage } from \"../../slices/topRatedSlice\";\r\nimport { fetchUpComingMovies, totalUpComingPage, currentUpComingPage, nextPage as nextUpComingPage, prevPage as prevUpComingPage } from \"../../slices/upComingSlice\";\r\nimport { fetchSearchResults, totalSearchPage, currentSearchPage, nextPage as nextSearchPage, prevPage as prevSearchPage } from \"../../slices/searchSlice\";\r\nimport \"./Pagination.css\";\r\n\r\nexport const Pagination = ({ category }) => {\r\n    const popularPageCurrent = useSelector(currentPopularPage);\r\n    const popularPageTotal = useSelector(totalPopularPage);\r\n    \r\n    const topRatedPageCurrent = useSelector(currentTopRatedPage);\r\n    const topRatedPageTotal = useSelector(totalTopRatedPage);\r\n\r\n    const upComingPageCurrent = useSelector(currentUpComingPage);\r\n    const upComingTotal = useSelector(totalUpComingPage);\r\n\r\n    const searchPageCurrent = useSelector(currentSearchPage);\r\n    const searchPageTotal = useSelector(totalSearchPage);\r\n\r\n    const currentPage =\r\n        category === \"Popular\" ? popularPageCurrent :\r\n        category === \"Top Rated\" ? topRatedPageCurrent : \r\n        category === \"upComing\" ? upComingPageCurrent : searchPageCurrent;\r\n\r\n    const totalPage =\r\n        category === \"Popular\" ? popularPageTotal :\r\n        category === \"Top Rated\" ? topRatedPageTotal : \r\n        category === \"upComing\" ? upComingTotal : searchPageTotal;\r\n\r\n    const nextPage =\r\n        category === \"Popular\" ? nextPopularPage :\r\n        category === \"Top Rated\" ? nextTopRatedPage : \r\n        category === \"upComing\" ? nextUpComingPage : nextSearchPage;\r\n\r\n    const prevPage =\r\n        category === \"Popular\" ? prevPopularPage :\r\n        category === \"Top Rated\" ? prevTopRatedPage : \r\n        category === \"upComing\" ? prevUpComingPage: prevSearchPage;\r\n\r\n    const fetchNewPage =\r\n        category === \"Popular\" ? fetchPopularMovies :\r\n        category === \"Top Rated\" ? fetchtopRatedMovies : \r\n        category === \"upComing\" ? fetchUpComingMovies: fetchSearchResults;\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const handleNextPage = () => {\r\n        dispatch(nextPage());\r\n        dispatch(fetchNewPage());\r\n    }\r\n    const handlePrevPage = () => {\r\n        dispatch(prevPage());\r\n        dispatch(fetchNewPage());\r\n    }\r\n\r\n    return (\r\n        <section className=\"pagination\">\r\n            {currentPage !== 1 && <button onClick={handlePrevPage}>Prev</button>}\r\n            <p>Page {currentPage} of {totalPage}</p>\r\n            {currentPage !== totalPage && <button onClick={handleNextPage}>Next</button>}\r\n        </section>\r\n    );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Card } from \"../card/Card\";\r\nimport { selectTopRatedMovies, fetchtopRatedMovies, topRatedMovieStatus } from \"../slices/topRatedSlice\";\r\nimport { showMovieDetails } from \"../slices/movieDetailSlice\";\r\nimport { PageHeading } from \"./pageHeading/PageHeading\";\r\nimport { Pagination } from \"./pagination/Pagination\";\r\nimport { MovieDetails } from \"./MovieDetails\";\r\n\r\nexport const TopRated = () => {\r\n    const [MovieId, setMovieId] = useState(\"\");\r\n\r\n    const topRatedMoviesArray = useSelector(selectTopRatedMovies);\r\n\r\n    const topRatedMovies = topRatedMoviesArray.map(movies => {\r\n        const { title, vote_average: rating, poster_path: poster, release_date: year, id } = movies;\r\n\r\n        return <Card title={title} rating={rating} poster={poster} year={year} setMovieId={setMovieId} id={id} key={title + rating} />\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const topRatedStatus = useSelector(topRatedMovieStatus);\r\n    const showMovieDetail = useSelector(showMovieDetails);\r\n\r\n    useEffect(() => {\r\n        if (topRatedStatus === \"idle\") {\r\n            dispatch(fetchtopRatedMovies());\r\n        }\r\n\r\n    }, [topRatedStatus, dispatch]);\r\n\r\n    return (\r\n        <main>\r\n            {showMovieDetail && <MovieDetails MovieId={MovieId} />}\r\n            {!showMovieDetail &&\r\n                <section className=\"movieCategory\">\r\n                    <PageHeading page=\"Top Rated\" />\r\n                    <section className=\"movieList\">{topRatedMovies}</section>\r\n                    <Pagination category=\"Top Rated\" />\r\n                </section>\r\n            }\r\n        </main>\r\n    );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Card } from \"../card/Card\";\r\nimport { selectUpComingMovies, fetchUpComingMovies, upComingMovieStatus } from \"../slices/upComingSlice\";\r\nimport { showMovieDetails } from \"../slices/movieDetailSlice\";\r\nimport { PageHeading } from \"./pageHeading/PageHeading\";\r\nimport { Pagination } from \"./pagination/Pagination\";\r\nimport { MovieDetails } from \"./MovieDetails\";\r\n\r\nexport const Upcoming = () => {\r\n    const [MovieId, setMovieId] = useState(\"\");\r\n\r\n    const upComingMoviesArray = useSelector(selectUpComingMovies);\r\n\r\n    const upComingMovies = upComingMoviesArray.map(movies => {\r\n        const { title, vote_average: rating, poster_path: poster, release_date: year, id } = movies;\r\n\r\n        return <Card title={title} rating={rating} poster={poster} year={year} setMovieId={setMovieId} id={id} key={title + rating} />\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const upComingStatus = useSelector(upComingMovieStatus);\r\n    const showMovieDetail = useSelector(showMovieDetails);\r\n\r\n    useEffect(() => {\r\n        if (upComingStatus === \"idle\") {\r\n            dispatch(fetchUpComingMovies());\r\n        }\r\n\r\n    }, [upComingStatus, dispatch]);\r\n\r\n    return (\r\n        <main>\r\n            {showMovieDetail && <MovieDetails MovieId={MovieId} />}\r\n            {!showMovieDetail &&\r\n                <section className=\"movieCategory\">\r\n                    <PageHeading page=\"upComing\" />\r\n                    <section className=\"movieList\">{upComingMovies}</section>\r\n                    <Pagination category=\"upComing\" />\r\n                </section>\r\n            }\r\n        </main>\r\n    );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Card } from \"../card/Card\";\r\nimport { selectPopularMovies, fetchPopularMovies, popularMovieStatus} from \"../slices/popularSlice\";\r\nimport {showMovieDetails} from \"../slices/movieDetailSlice\";\r\nimport { PageHeading } from \"./pageHeading/PageHeading\";\r\nimport { Pagination } from \"./pagination/Pagination\";\r\nimport { MovieDetails } from \"./MovieDetails\";\r\n\r\nexport const Popular = () => {\r\n    const [MovieId, setMovieId] = useState(\"\");\r\n\r\n    const popularMoviesArray = useSelector(selectPopularMovies);\r\n\r\n    const popularMovies = popularMoviesArray.map(movies => {\r\n        const { title, vote_average: rating, poster_path: poster, release_date: year, id } = movies;\r\n\r\n        return <Card title={title} rating={rating} poster={poster} year={year} setMovieId={setMovieId} id={id} key={title + rating} />\r\n    });\r\n\r\n    const popularStatus = useSelector(popularMovieStatus);\r\n    const showMovieDetail = useSelector(showMovieDetails);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (popularStatus === \"idle\") {\r\n            dispatch(fetchPopularMovies());\r\n        }\r\n\r\n    }, [popularStatus, dispatch]);\r\n\r\n    return (\r\n        <main>\r\n            {showMovieDetail && <MovieDetails MovieId={MovieId}/>}\r\n            {!showMovieDetail &&\r\n                <section className=\"movieCategory\">\r\n                    <PageHeading page=\"Popular\" />\r\n                    <section className=\"movieList\">{popularMovies}</section>\r\n                    <Pagination category=\"Popular\" />\r\n                </section>\r\n            }\r\n        </main>\r\n    );\r\n};","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Card } from \"../card/Card\";\r\nimport { selectSearchMovies } from \"../slices/searchSlice\";\r\nimport { showMovieDetails } from \"../slices/movieDetailSlice\";\r\nimport { PageHeading } from \"./pageHeading/PageHeading\";\r\nimport { Pagination } from \"./pagination/Pagination\";\r\nimport { MovieDetails } from \"./MovieDetails\";\r\n\r\nexport const SearchResults = () => {\r\n    const [MovieId, setMovieId] = useState(\"\");\r\n\r\n    const searchMoviesArray = useSelector(selectSearchMovies);\r\n    const showMovieDetail = useSelector(showMovieDetails);\r\n\r\n    const searchResults = searchMoviesArray.map(movies => {\r\n        const { title, vote_average: rating, poster_path: poster, release_date: year, id } = movies;\r\n\r\n        return <Card title={title} rating={rating} poster={poster} year={year} setMovieId={setMovieId} id={id} key={title + rating} />\r\n    });\r\n\r\n    return (\r\n        <main>\r\n            {showMovieDetail && <MovieDetails MovieId={MovieId} />}\r\n            {!showMovieDetail &&\r\n                <section className=\"movieCategory\">\r\n                    <PageHeading page=\"Search\" />\r\n                    <section className=\"movieList\">{searchResults}</section>\r\n                    <Pagination category=\"search\" />\r\n                </section>\r\n            }\r\n        </main>\r\n    );\r\n};","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Header } from \"./features/header/Header\";\r\nimport { Home } from \"./features/pages/home/Home\";\r\nimport {TopRated} from \"./features/pages/TopRated\";\r\nimport {Upcoming} from \"./features/pages/Upcoming\";\r\nimport {Popular} from \"./features/pages/Popular\";\r\nimport {SearchResults} from \"./features/pages/SearchResults\";\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Router>\r\n            <Header />\r\n\r\n            <Switch>\r\n                <Route path=\"/Movie-App\"><Home /></Route>\r\n                <Route path=\"/Top Rated\"><TopRated/></Route>\r\n                <Route path=\"/Upcoming\"><Upcoming/></Route>\r\n                <Route path=\"/Popular\"><Popular/></Route>\r\n                <Route path=\"/Search Results\"><SearchResults/></Route>\r\n            </Switch>\r\n\r\n        </Router>\r\n    );\r\n};","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport popularReducer from \"./features/slices/popularSlice\";\r\nimport topRatedReducer from \"./features/slices/topRatedSlice\";\r\nimport upComingReducer from \"./features/slices/upComingSlice\";\r\nimport searchReducer from \"./features/slices/searchSlice\";\r\nimport movieDetailsReducer from \"./features/slices/movieDetailSlice\";\r\n\r\nconst reducers = {\r\n    popular: popularReducer,\r\n    topRated: topRatedReducer,\r\n    upComing: upComingReducer,\r\n    search: searchReducer,\r\n    showMovieDetails: movieDetailsReducer\r\n};\r\n\r\nexport const store = configureStore({\r\n    reducer: reducers\r\n});","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {App} from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\";\r\nimport \"./index.css\"\r\n\r\nconst destination = document.querySelector(\"#root\");\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    destination\r\n);"],"sourceRoot":""}